path /connection {
  read() { isCloudFunction() }
}

path /connection/{uid} is Connection {
  read() { isCurrentUser(this.watching) }
  write() {
    (isCurrentUser(uid) && (this == null || this.watching == null)) ||
    (isCloudFunction() && this.peerId == prior(this.peerId) && prior(this).watching == null && this.watching != null && isOnline(this.watching))
  }
}

path /stats/connections/count is NaturalNumber {
  write() { isCloudFunction() }
}

type Connection {
  peerId: String;
  watching: String | Null;
}

type NaturalNumber extends Number {
  validate() { (this + '').test(/^\d+$/) }
}

isOnline(uid) {
  root.connection[uid] != null
}

isCurrentUser(uid) {
  auth != null && uid != null && auth.uid == uid
}

isCloudFunction() {
  auth != null && auth.uid == 'cloudfunction@kaleidoscope'
}
